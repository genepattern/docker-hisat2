#Hisat2Aligner
#Fri Feb 02 21:20:19 UTC 2018
JVMLevel=
LSID=urn\:lsid:broad.mit.edu\:cancer.software.genepattern.module.analysis\:00367\:0.71
author=Ted Liefeld;UCSD
categories=Sequence Analysis
commandLine=python <libdir>/hisat_wrapper.py  -index <index> -U <reads.pair.1> <reads.pair.2>   -S <output.prefix>   \n -k <max.primary.alignments>  --max-seeds <max.seeds.extended>  -min_n_ceil <min.n.ceil>        -min.mismatch.penalty <min.mismatch.penalty>  --np <ambiguous.read.penalty> -read.gap.open.pen <read.gap.open.penalty> -ref.gap.open.pen <reference.gap.open.penalty> --pen-cansplice <penalty.for.canonical.splice.sites> --pen-noncansplice <penalty.for.non-canonical.splice.sites> -min_pen-canintronlen <min.penalty.long.introns.with.canonical.splice.sites> -max_pen-canintronlen <max.penalty.long.introns.with.canonical.splice.sites> --min-intronlen  <minimum.intron.length> --max-intronlen <maximum.intron.length>   -X <maximum.fragment.length.for.paired.alignment> <unpaired.alignments.for.paired.reads> <discordant.alignments.for.paired.reads>   <input.format> <quality.value.scale> <integer.quality.value> <mate.orientations> <novel.splicesites.infile> <ignore.read.qualities> <align> -max.mismatch.penalty <max.mismatch.penalty> <soft.clipping> -min_softclip_penalty <min.softclip.penalty> -max_softclip_penalty <max.softclip.penalty> -max_n_ceil <max.n.ceil> -read.gap.extend.pen <read.gap.extend.penalty> -ref.gap.extend.pen  <reference.gap.extend.pen> <spliced.alignments>  -I <minimum.fragment.length.for.paired.alignment> <secondary.alignments> <max.reads.to.align>   -min.score.align <min.score.align> -max.score.align <max.score.align>   <novel.splicesites> <mapped.reads> <unmapped.reads> -dryRun <dry.run> -min_pen-noncanintronlen <min.penalty.long.introns.with.noncanonical.splice.sites> -max_pen-noncanintronlen <max.penalty.long.introns.with.noncanonical.splice.sites> -p <job.cpuCount>
cpuType=any
description=Hisat2 Aligner, This module is in beta test.  Please notify jliefeld at cloud.ucsd.edu with any issues that you experience
fileFormat=sam
language=any
name=Hisat2Aligner
os=any
p10_MODE=
p10_TYPE=Integer
p10_default_value=1
p10_description=Sets penalty for positions where the read, reference, or both, contain an ambiguous character such as `N`. 
p10_fileFormat=
p10_flag=--np 
p10_name=ambiguous.read.penalty
p10_numValues=1..1
p10_optional=
p10_prefix=
p10_prefix_when_specified=
p10_type=java.lang.Integer
p10_value=
p11_MODE=
p11_TYPE=Integer
p11_default_value=5
p11_description=Sets the read gap open penalty. A read gap of length N gets a penalty of `` + N * ``. 
p11_fileFormat=
p11_flag=
p11_name=read.gap.open.penalty
p11_numValues=1..1
p11_optional=on
p11_prefix=
p11_prefix_when_specified=
p11_type=java.lang.Integer
p11_value=
p12_MODE=
p12_TYPE=Integer
p12_default_value=5
p12_description=Sets the reference gap open penalty. A read gap of length N gets a penalty of `` + N * ``. 
p12_fileFormat=
p12_flag=
p12_name=reference.gap.open.penalty
p12_numValues=0..1
p12_optional=on
p12_prefix=
p12_prefix_when_specified=
p12_type=java.lang.Integer
p12_value=
p13_MODE=
p13_TYPE=Integer
p13_default_value=0
p13_description=Sets the penalty for each pair of canonical splice sites (e.g. GT/AG). \n
p13_fileFormat=
p13_flag=--pen-cansplice 
p13_name=penalty.for.canonical.splice.sites
p13_numValues=0..1
p13_optional=on
p13_prefix=
p13_prefix_when_specified=
p13_type=java.lang.Integer
p13_value=
p14_MODE=
p14_TYPE=Integer
p14_default_value=12
p14_description=Sets the penalty for each pair of non-canonical splice sites (e.g. non-GT/AG). 
p14_fileFormat=
p14_flag=--pen-noncansplice 
p14_name=penalty.for.non-canonical.splice.sites
p14_numValues=0..1
p14_optional=on
p14_prefix=
p14_prefix_when_specified=
p14_type=java.lang.Integer
p14_value=
p15_MODE=
p15_TYPE=Integer
p15_default_value=-8
p15_description=Sets the minimum in a natural log penalty function for long introns with canonical splice sites so that alignments with shorter introns are preferred to those with longer ones.
p15_fileFormat=
p15_flag=-min_pen-canintronlen 
p15_name=min.penalty.long.introns.with.canonical.splice.sites
p15_numValues=0..1
p15_optional=on
p15_prefix=
p15_prefix_when_specified=
p15_type=java.lang.Integer
p15_value=
p16_MODE=
p16_TYPE=Integer
p16_default_value=1
p16_description=Sets the maximim in a natural log penalty function for long introns with canonical splice sites so that alignments with shorter introns are preferred to those with longer ones.
p16_fileFormat=
p16_flag=-max_pen-canintronlen 
p16_name=max.penalty.long.introns.with.canonical.splice.sites
p16_numValues=0..1
p16_optional=on
p16_prefix=
p16_prefix_when_specified=
p16_type=java.lang.Integer
p16_value=
p17_MODE=
p17_TYPE=Integer
p17_default_value=20
p17_description=Sets minimum intron length. 
p17_fileFormat=
p17_flag=--min-intronlen  
p17_name=minimum.intron.length
p17_numValues=1..1
p17_optional=
p17_prefix=
p17_prefix_when_specified=
p17_type=java.lang.Integer
p17_value=
p18_MODE=
p18_TYPE=Integer
p18_default_value=500000
p18_description=Sets maximum intron length.\n
p18_fileFormat=
p18_flag=--max-intronlen 
p18_name=maximum.intron.length
p18_numValues=0..1
p18_optional=on
p18_prefix=
p18_prefix_when_specified=
p18_type=java.lang.Integer
p18_value=
p19_MODE=
p19_TYPE=Integer
p19_default_value=500
p19_description=The maximum fragment length for valid paired-end alignments.This option is valid only with no spliced alignment. E.g. if 100 is specified and a paired-end alignment consists of two 20-bp alignments in the appropriate orientation with a 60-bp gap between them, that alignment is considered valid (as long as the minimum fragment length is also satisfied). A 61-bp gap would not be valid in that case. If trimming options -3 or -5 are also used, the  constraint is applied with respect to the untrimmed mates.\n\nThe larger the difference between minimum and maximum fragment lengths, the slower HISAT2 will run. This is because larger differences scan a larger window to determine if a concordant alignment exists. For typical fragment length ranges (200 to 400 nucleotides), HISAT2 is very efficient. 
p19_fileFormat=
p19_flag=-X 
p19_name=maximum.fragment.length.for.paired.alignment
p19_numValues=0..1
p19_optional=on
p19_prefix=
p19_prefix_when_specified=
p19_type=java.lang.Integer
p19_value=
p1_MODE=IN
p1_TYPE=FILE
p1_choiceDir=ftp\://gpftp.broadinstitute.org/module_support_files/hisat2/index/by_genome/
p1_choiceDirFilter=type\=dir
p1_default_value=
p1_description=Directory or zip file containing a Hisat2 genome index to be aligned to.
p1_fileFormat=DIRECTORY
p1_flag=
p1_name=index
p1_numValues=1..1
p1_optional=
p1_prefix=
p1_prefix_when_specified=
p1_type=java.io.File
p1_value=
p20_MODE=
p20_TYPE=TEXT
p20_default_value=--WRAPPER_IGNORE
p20_description=By default, when `hisat2` cannot find a concordant or discordant alignment for a pair, it then tries to find alignments for the individual mates.  This option disables that behavior. 
p20_fileFormat=
p20_flag=
p20_name=unpaired.alignments.for.paired.reads
p20_numValues=0..1
p20_optional=on
p20_prefix=
p20_prefix_when_specified=
p20_type=java.lang.String
p20_value=--WRAPPER_IGNORE\= no;--no-mixed\=Disabled
p21_MODE=
p21_TYPE=TEXT
p21_default_value=--WRAPPER_IGNORE
p21_description=By default, `hisat2` looks for discordant alignments if it cannot find any concordant alignments.  A discordant alignment is an alignment where both mates align uniquely, but that does not satisfy the paired-end constraints (`--fr`/`--rf`/`--ff`, `-I`, `-X`).  This option disables that behavior.\n
p21_fileFormat=
p21_flag=
p21_name=discordant.alignments.for.paired.reads
p21_numValues=0..1
p21_optional=on
p21_prefix=
p21_prefix_when_specified=
p21_type=java.lang.String
p21_value=--WRAPPER_IGNORE\= No;--no-discordant\=Disabled
p22_MODE=
p22_TYPE=TEXT
p22_default_value=-q
p22_description=The format of the input reads files.  May be fastQ, fastA, raw (one sequence per line) or Illumina qseq format.
p22_fileFormat=
p22_flag=
p22_name=input.format
p22_numValues=1..1
p22_optional=
p22_prefix=
p22_prefix_when_specified=
p22_type=java.lang.String
p22_value=-q\=fastQ;-f\=fastA;-r\=raw (one sequence per line);-qseq\=Illumina qseq format
p23_MODE=
p23_TYPE=TEXT
p23_default_value=--phred33
p23_description=Whether to use the Solexa, Phred 33, Phred 64 quality value scale
p23_fileFormat=
p23_flag=
p23_name=quality.value.scale
p23_numValues=1..1
p23_optional=
p23_prefix=
p23_prefix_when_specified=
p23_type=java.lang.String
p23_value=--phred33\=phred33-Quals;--phred64\=phred64-quals;--solexa-quals\=solexa-quals
p24_MODE=
p24_TYPE=TEXT
p24_default_value=--WRAPPER_IGNORE
p24_description=Quality values are represented in the read input file as space-separated ASCII integers, e.g., 40 40 30 40..., rather than ASCII characters, e.g., II?I.... Integers are treated as being on the Phred quality scale unless "Solexa" is also specified for the <quality value scale>.
p24_fileFormat=
p24_flag=
p24_name=integer.quality.value
p24_numValues=0..1
p24_optional=on
p24_prefix=
p24_prefix_when_specified=
p24_type=java.lang.String
p24_value=--int-quals\=yes;--WRAPPER_IGNORE\=no
p25_MODE=
p25_TYPE=TEXT
p25_default_value=--fr
p25_description=The upstream/downstream mate orientations for a valid paired-end alignment against the forward reference strand. 
p25_fileFormat=
p25_flag=
p25_name=mate.orientations
p25_numValues=1..1
p25_optional=
p25_prefix=
p25_prefix_when_specified=
p25_type=java.lang.String
p25_value=--fr\=first mate forward, second mate reverse;--rf\=first mate reverse, second mate forward;--ff\=both mates forward
p26_MODE=IN
p26_TYPE=FILE
p26_default_value=
p26_description=An optional list of known splice sites, which HISAT2 makes use of to align reads with small anchors.
p26_fileFormat=
p26_flag=--novel-splicesite-infile 
p26_name=novel.splicesites.infile
p26_numValues=0..1
p26_optional=on
p26_prefix=--novel-splicesite-infile 
p26_prefix_when_specified=--novel-splicesite-infile 
p26_type=java.io.File
p26_value=
p27_MODE=
p27_TYPE=TEXT
p27_default_value=--WRAPPER_IGNORE
p27_description=When calculating a mismatch penalty, always consider the quality value at the mismatched position to be the highest possible, regardless of the actual value. I.e. input is treated as though all quality values are high. This is also the default behavior when the input doesn't specify quality values
p27_fileFormat=
p27_flag=
p27_name=ignore.read.qualities
p27_numValues=1..1
p27_optional=
p27_prefix=
p27_prefix_when_specified=
p27_type=java.lang.String
p27_value=--WRAPPER_IGNORE\=no;--ignore-quals\=yes
p28_MODE=
p28_TYPE=TEXT
p28_default_value=--WRAPPER_IGNORE
p28_description=Align unpaired reads against the forward reference strand only, the reverse-complement (Crick) reference strand only, or both.
p28_fileFormat=
p28_flag=
p28_name=align
p28_numValues=0..1
p28_optional=
p28_prefix=
p28_prefix_when_specified=
p28_type=java.lang.String
p28_value=--norc\=only against forward strand;--nofw\=only reverse;--WRAPPER_IGNORE\= both
p29_MODE=
p29_TYPE=Integer
p29_default_value=6
p29_description=Sets the maximum (`MX`)  mismatch penalty. A number less than or equal to `MX` and greater than or equal to <min mismatch penalty> (`MN`) is subtracted from the alignment score for each position where a read character aligns to a reference character, the characters do not match, and neither is an `N`. If <ignore read qualities> is specified, the number subtracted quals `MX`. Otherwise, the number subtracted is `MN + floor( (MX-MN)(MIN(Q, 40.0)/40.0) )` where Q is the Phred quality value. Default\: `MX` \= 6, `MN` \= 2.
p29_fileFormat=
p29_flag=
p29_name=max.mismatch.penalty
p29_numValues=1..1
p29_optional=
p29_prefix=
p29_prefix_when_specified=
p29_type=java.lang.Integer
p29_value=
p2_MODE=IN
p2_TYPE=FILE
p2_default_value=
p2_description=Unpaired reads file or first mate for paired reads. One or more files containing reads in FASTA or FASTQ format (bz2 and gz compressed files are supported).
p2_fileFormat=
p2_flag=
p2_name=reads.pair.1
p2_numValues=1+
p2_optional=
p2_prefix=
p2_prefix_when_specified=
p2_type=java.io.File
p2_value=
p30_MODE=
p30_TYPE=TEXT
p30_default_value=-WRAPPER_IGNORE
p30_description=Allow or disallow soft clipping.
p30_fileFormat=
p30_flag=
p30_name=soft.clipping
p30_numValues=1..1
p30_optional=
p30_prefix=
p30_prefix_when_specified=
p30_type=java.lang.String
p30_value=-WRAPPER_IGNORE\=yes;--no-softclip\=no
p31_MODE=
p31_TYPE=Integer
p31_default_value=1
p31_description=Sets the  minimum (MN) penalty for soft-clipping per base. A number less than or equal to the max softclip penalty (MX) and greater than or equal to MN is subtracted from the alignment score for each position. The number subtracted is MN + floor( (MX-MN)(MIN(Q, 40.0)/40.0) ) where Q is the Phred quality value. Default\: MX \= 2, MN \= 1.
p31_fileFormat=
p31_flag=
p31_name=min.softclip.penalty
p31_numValues=0..1
p31_optional=
p31_prefix=
p31_prefix_when_specified=
p31_type=java.lang.Integer
p31_value=
p32_MODE=
p32_TYPE=Integer
p32_default_value=2
p32_description=Sets the maximum (MX) penalty for soft-clipping per base. A number less than or equal to MX and greater than or equal to the min softclip penalty (MN) is subtracted from the alignment score for each position. The number subtracted is MN + floor( (MX-MN)(MIN(Q, 40.0)/40.0) ) where Q is the Phred quality value. Default\: MX \= 2, MN \= 1.
p32_fileFormat=
p32_flag=
p32_name=max.softclip.penalty
p32_numValues=0..1
p32_optional=
p32_prefix=
p32_prefix_when_specified=
p32_type=java.lang.Integer
p32_value=
p33_MODE=
p33_TYPE=Floating Point
p33_default_value=.15
p33_description=Sets a maximum in a linear function governing the maximum number of ambiguous characters (usually `N`s and/or `.`s) allowed in a read as a function of read length. 
p33_fileFormat=
p33_flag=
p33_name=max.n.ceil
p33_numValues=1..1
p33_optional=
p33_prefix=
p33_prefix_when_specified=
p33_type=java.lang.Float
p33_value=
p34_MODE=
p34_TYPE=Integer
p34_default_value=3
p34_description=Sets the read gap extend penalty. A read gap of length N gets a penalty of `` + N * ``. 
p34_fileFormat=
p34_flag=
p34_name=read.gap.extend.penalty
p34_numValues=1..1
p34_optional=
p34_prefix=
p34_prefix_when_specified=
p34_type=java.lang.Integer
p34_value=
p35_MODE=
p35_TYPE=Integer
p35_default_value=3
p35_description=Sets the reference gap extend penalty. A read gap of length N gets a penalty of `` + N * ``. 
p35_fileFormat=
p35_flag=
p35_name=reference.gap.extend.pen
p35_numValues=1..1
p35_optional=
p35_prefix=
p35_prefix_when_specified=
p35_type=java.lang.Integer
p35_value=
p36_MODE=
p36_TYPE=TEXT
p36_default_value=--WRAPPER_IGNORE
p36_description=Disables spliced alignments if set to 'no'.
p36_fileFormat=
p36_flag=
p36_name=spliced.alignments
p36_numValues=0..1
p36_optional=
p36_prefix=
p36_prefix_when_specified=
p36_type=java.lang.String
p36_value=--WRAPPER_IGNORE\= yes;--no-spliced-alignments\=no
p37_MODE=
p37_TYPE=Floating Point
p37_default_value=0
p37_description=Sets minimum on the function governing the minimum alignment score needed for an alignment to be considered "valid" (i.e. good enough to report). This is a function of read length. For instance, specifying 0 sets the minimum-score function f to f(x) \= 0 + -0.6 * x, where x is the read length and -0.6 is the max score align value. 
p37_fileFormat=
p37_flag=-min.score.align 
p37_name=min.score.align
p37_numValues=0..1
p37_optional=
p37_prefix=
p37_prefix_when_specified=
p37_type=java.lang.Float
p37_value=
p38_MODE=
p38_TYPE=Floating Point
p38_default_value=-.2
p38_description=Sets maximum on the function governing the minimum alignment score needed for an alignment to be considered "valid" (i.e. good enough to report). This is a function of read length. For instance, specifying -0.6 sets the minimum-score function f to f(x) \= 0.1 + -0.6 * x, where x is the read length and 0.1 is the min score align value. 
p38_fileFormat=
p38_flag=-max.score.align 
p38_name=max.score.align
p38_numValues=0..1
p38_optional=
p38_prefix=
p38_prefix_when_specified=
p38_type=java.lang.Float
p38_value=
p39_MODE=
p39_TYPE=Integer
p39_default_value=0
p39_description=The minimum fragment length for valid paired-end alignments.This option is valid only with no spliced alignment. E.g. if 60 is specified and a paired-end alignment consists of two 20-bp alignments in the appropriate orientation with a 20-bp gap between them, that alignment is considered valid (as long as the maximum fragment length is also satisfied). A 19-bp gap would not be valid in that case. If trimming options -3 or -5 are also used, the  constraint is applied with respect to the untrimmed mates.\n\nThe larger the difference between minimum and maximum fragment lengths, the slower HISAT2 will run. This is because larger differences scan a larger window to determine if a concordant alignment exists. For typical fragment length ranges (200 to 400 nucleotides), HISAT2 is very efficient. 
p39_fileFormat=
p39_flag=-I 
p39_name=minimum.fragment.length.for.paired.alignment
p39_numValues=0..1
p39_optional=
p39_prefix=
p39_prefix_when_specified=
p39_type=java.lang.Integer
p39_value=
p3_MODE=
p3_TYPE=TEXT
p3_default_value=mapped
p3_description=The prefix to use for the output file name.
p3_fileFormat=
p3_flag=
p3_name=output.prefix
p3_numValues=1..1
p3_optional=
p3_prefix=
p3_prefix_when_specified=
p3_type=java.lang.String
p3_value=
p40_MODE=
p40_TYPE=TEXT
p40_default_value=--WRAPPER_IGNORE
p40_description=Report secondary alignments.
p40_fileFormat=
p40_flag=
p40_name=secondary.alignments
p40_numValues=0..1
p40_optional=
p40_prefix=
p40_prefix_when_specified=
p40_type=java.lang.String
p40_value=--WRAPPER_IGNORE\= no;--secondary\=yes
p41_MODE=
p41_TYPE=TEXT
p41_default_value=
p41_description=Optional output file for novel splice sites found.
p41_fileFormat=
p41_flag=--novel-splicesite-outfile 
p41_name=novel.splicesites
p41_numValues=0..1
p41_optional=on
p41_prefix=--novel-splicesite-outfile 
p41_prefix_when_specified=--novel-splicesite-outfile 
p41_type=java.lang.String
p41_value=
p42_MODE=
p42_TYPE=TEXT
p42_default_value=
p42_description=Optional\: write unpaired reads that align at least once to a file.
p42_fileFormat=
p42_flag=-mapped.reads 
p42_name=mapped.reads
p42_numValues=0..1
p42_optional=on
p42_prefix=-mapped.reads 
p42_prefix_when_specified=-mapped.reads 
p42_type=java.lang.String
p42_value=
p43_MODE=
p43_TYPE=TEXT
p43_default_value=
p43_description=Write paired-end reads that align concordantly at least once to file(s).
p43_fileFormat=
p43_flag=-unmapped.reads 
p43_name=unmapped.reads
p43_numValues=0..1
p43_optional=on
p43_prefix=-unmapped.reads 
p43_prefix_when_specified=-unmapped.reads 
p43_type=java.lang.String
p43_value=
p44_MODE=
p44_TYPE=TEXT
p44_default_value=False
p44_description=When true, the module only prints the hisat command-line that would be used to the program's standard output file (stdout.txt) but does not execute the alignment.  Useful for testing or generating a command line to run HISAT2 outside of GenePattern.
p44_fileFormat=
p44_flag=-dryRun 
p44_name=dry.run
p44_numValues=0..1
p44_optional=
p44_prefix=
p44_prefix_when_specified=
p44_type=java.lang.String
p44_value=False\=False;True\=True
p45_MODE=
p45_TYPE=Integer
p45_default_value=-8
p45_description=Sets the minimum in a natural log penalty function for long introns with noncanonical splice sites so that alignments with shorter introns are preferred to those with longer ones. 
p45_fileFormat=
p45_flag=-min_pen-noncanintronlen 
p45_name=min.penalty.long.introns.with.noncanonical.splice.sites
p45_numValues=0..1
p45_optional=
p45_prefix=
p45_prefix_when_specified=
p45_type=java.lang.Integer
p45_value=
p46_MODE=
p46_TYPE=Integer
p46_default_value=1
p46_description=Sets the maximim in a natural log penalty function for long introns with noncanonical splice sites so that alignments with shorter introns are preferred to those with longer ones. 
p46_fileFormat=
p46_flag=-max_pen-noncanintronlen 
p46_name=max.penalty.long.introns.with.noncanonical.splice.sites
p46_numValues=0..1
p46_optional=
p46_prefix=
p46_prefix_when_specified=
p46_type=java.lang.Integer
p46_value=
p4_MODE=IN
p4_TYPE=FILE
p4_default_value=
p4_description=Second mate for paired reads. Zero or more files in FASTA or FASTQ format (bz2 and gz compressed files are supported).
p4_fileFormat=
p4_flag=-2 
p4_name=reads.pair.2
p4_numValues=0+
p4_optional=on
p4_prefix=-2 
p4_prefix_when_specified=-2 
p4_type=java.io.File
p4_value=
p5_MODE=
p5_TYPE=Integer
p5_default_value=5
p5_description=HISAT2 searches for up to N distinct, primary alignments for each read, where N equals the integer specified with this parameter. Primary alignments mean alignments whose alignment score is equal or higher than any other alignments. It is possible that multiple distinct alignments have the same score. That is, if `2` is specified, HISAT2 will search for at most 2 distinct alignments. The alignment score for a paired-end alignment equals the sum of the alignment scores of the individual mates. Each reported read or pair alignment beyond the first has the SAM 'secondary' bit (which equals 256) set in its FLAGS field.
p5_fileFormat=
p5_flag=-k 
p5_name=max.primary.alignments
p5_numValues=1..1
p5_optional=
p5_prefix=
p5_prefix_when_specified=
p5_type=java.lang.Integer
p5_value=
p6_MODE=
p6_TYPE=Integer
p6_default_value=5
p6_description=HISAT2, like other aligners, uses seed-and-extend approaches. HISAT2 tries to extend seeds to full-length alignments. In HISAT2, --max-seeds is used to control the maximum number of seeds that will be extended. HISAT2 extends up to these many seeds and skips the rest of the seeds. Large values for <max seeds extended>` may improve alignment sensitivity, but HISAT2 is not designed with large values for<max seeds extended> in mind, and when aligning reads to long, repetitive genomes large <max seeds extended> can be very, very slow.
p6_fileFormat=
p6_flag=--max-seeds 
p6_name=max.seeds.extended
p6_numValues=0..1
p6_optional=on
p6_prefix=
p6_prefix_when_specified=
p6_type=java.lang.Integer
p6_value=
p7_MODE=
p7_TYPE=Floating Point
p7_default_value=0
p7_description=Sets the minimum value in a linear function governing the maximum number of ambiguous characters (usually `N`s and/or `.`s) allowed in a read as a function of read length. specifying `-L,0,0.15` sets the N-ceiling function `f` to `f(x) \= 0 + 0.15 * x`,\nwhere x is the read length.  See also\: [setting function options].  Reads\nexceeding this ceiling are [filtered out].  Default\: `L,0,0.15`.\n`N`s and/or `.`s) allowed in a read as a function of read length.   In these cases the user specifies three parameters\: (a) a function\ntype `F`, (b) a constant term `B`, and (c) a coefficient `A`. For instance,\nspecifying `-L,0,0.15` sets the N-ceiling function `f` to `f(x) \= 0 + 0.15 * x`,\nwhere x is the read length
p7_fileFormat=
p7_flag=
p7_name=min.n.ceil
p7_numValues=1..1
p7_optional=
p7_prefix=
p7_prefix_when_specified=
p7_type=java.lang.Float
p7_value=
p8_MODE=
p8_TYPE=Integer
p8_default_value=
p8_description=Align the first \# reads or read pairs from the input (after the `-s`/`--skip` reads or pairs have been skipped), then stop. Mainly useful for testing.
p8_fileFormat=
p8_flag=-u 
p8_name=max.reads.to.align
p8_numValues=0..1
p8_optional=on
p8_prefix=-u 
p8_prefix_when_specified=-u 
p8_type=java.lang.Integer
p8_value=
p9_MODE=
p9_TYPE=Integer
p9_default_value=2
p9_description=Sets the  minimum (`MN`) mismatch penalty. A number less than or equal to <max mismatch penalty> (`MX`) and greater than or equal to `MN` is subtracted from the alignment score for each position where a read character aligns to a reference character, the characters do not match, and neither is an `N`. If <ignore read qualities> is specified, the number subtracted quals `MX`. Otherwise, the number subtracted is `MN + floor( (MX-MN)(MIN(Q, 40.0)/40.0) )` where Q is the Phred quality value. Default\: `MX` \= 6, `MN` \= 2.
p9_fileFormat=
p9_flag=
p9_name=min.mismatch.penalty
p9_numValues=1..1
p9_optional=
p9_prefix=
p9_prefix_when_specified=
p9_type=java.lang.Integer
p9_value=
privacy=public
quality=development
taskDoc=
taskType=Sequence Analysis
userid=ted
version=VIB Updates
