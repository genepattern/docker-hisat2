#Hisat2Aligner
#Mon Oct 02 18:40:23 UTC 2017
JVMLevel=
LSID=urn\:lsid\:8080.gpserver.ip-172-31-26-71.ip-172-31-26-71.ec2.internal\:genepatternmodules\:22\:26
author=Ted Liefeld;UCSD
categories=Sequence Analysis
commandLine=hisat2 -f -x <index.dir>/<index.file.prefix> <unpaired.input.fasta> <reads.pair.2>  <reads.pair.1>  -S <output.file.name>   \n <max.n.primary.alignments> <write.aligned.reads.to.separate.files> <max.seeds> <write.unaligned.reads.to.separate.files> --n-ceil <function.governing.maximum.number.of.ambiguous.characters>   <Ignore.quality.values> <skip.forward.strand> <skip.reverse.strand> -s<skip.first.n.reads.or.pairs> -u<stop.after.n.reads.or.pairs> <trim.5'.end> <trim.3'.end> <function.governing.minimum.alignment.score> <Maximum.and.minimum.mismatch.penalty> <disallow.soft.clipping> <Maximum.and.minimum.soft.clipping.penalty> <Ambiguous.read.penalty> <read.gap.open.and.extend.penalties> <reference.gap.open.and.extend.penalties> <penalty.for.canonical.splice.sites> <penalty.for.non-canonical.splice.sites> <penalty.function.for.long.introns.with.canonical.splice.sites> <penalty.function.for.long.introns.with.non-canonical.splice.sites> <Minimum.intron.length> <Maximum.intron.length> <Disable.spliced.alignment> <minimum.fragment.length.for.valid.paired-end.alignments> <maximum.fragment.length.for.valid.paired-end.alignments> <disable.finding.alignments.for.individual.mates> <disable.looking.for.discordant.alignments>  <known.splicesite.infile>
cpuType=any
description=Hisat2 Aligner
fileFormat=sam
language=any
name=Hisat2Aligner
os=any
p10_MODE=
p10_TYPE=Integer
p10_default_value=
p10_description=HISAT2, like other aligners, uses seed-and-extend approaches.  HISAT2 tries to extend seeds to full-length alignments. In HISAT2, --max-seeds is used to control the maximum number of seeds that will be extended. HISAT2 extends up to these many seeds and skips the rest of the seeds. Large values for `--max-seeds` may improve alignment sensitivity, but HISAT2 is not designed with large values for `--max-seeds` in mind, and when aligning reads to long, repetitive genomes large `--max-seeds` can be very, very slow. \n
p10_fileFormat=
p10_flag=--max-seeds 
p10_name=max.seeds
p10_numValues=0..1
p10_optional=on
p10_prefix=--max-seeds 
p10_prefix_when_specified=--max-seeds 
p10_type=java.lang.Integer
p10_value=
p11_MODE=
p11_TYPE=TEXT
p11_default_value=`L,0,0.15`
p11_description=Sets a function governing the maximum number of ambiguous characters (usually `N`s and/or `.`s) allowed in a read as a function of read length.  For instance,\nspecifying `-L,0,0.15` sets the N-ceiling function `f` to `f(x) \= 0 + 0.15 * x`,\nwhere x is the read length.  See also\: [setting function options].  Reads\nexceeding this ceiling are [filtered out].  Default\: `L,0,0.15`.\n`N`s and/or `.`s) allowed in a read as a function of read length.   In these cases the user specifies three parameters\: (a) a function\ntype `F`, (b) a constant term `B`, and (c) a coefficient `A`. For instance,\nspecifying `-L,0,0.15` sets the N-ceiling function `f` to `f(x) \= 0 + 0.15 * x`,\nwhere x is the read length
p11_fileFormat=
p11_flag=--n-ceil 
p11_name=function.governing.maximum.number.of.ambiguous.characters
p11_numValues=1..1
p11_optional=
p11_prefix=
p11_prefix_when_specified=
p11_type=java.lang.String
p11_value=
p12_MODE=
p12_TYPE=TEXT
p12_default_value=
p12_description=When calculating a mismatch penalty, always consider the quality value at the\nmismatched position to be the highest possible, regardless of the actual value. \nI.e. input is treated as though all quality values are high.  This is also the\ndefault behavior when the input doesn't specify quality values.
p12_fileFormat=
p12_flag=
p12_name=Ignore.quality.values
p12_numValues=0..1
p12_optional=on
p12_prefix=
p12_prefix_when_specified=
p12_type=java.lang.String
p12_value=--ignore-quals\=yes; \=no
p13_MODE=
p13_TYPE=TEXT
p13_default_value=
p13_description=If `--nofw` is specified, `hisat2` will not attempt to align unpaired reads to\nthe forward (Watson) reference strand. In paired-end mode, `--nofw` and `--norc` pertain to the\nfragments; i.e. specifying `--nofw` causes `hisat2` to explore only those\npaired-end configurations corresponding to fragments from the reverse-complement\n(Crick) strand.  Default\: both strands enabled. 
p13_fileFormat=
p13_flag=
p13_name=skip.forward.strand
p13_numValues=0..1
p13_optional=on
p13_prefix=
p13_prefix_when_specified=
p13_type=java.lang.String
p13_value=\ \= no;--nofw\=yes
p14_MODE=
p14_TYPE=TEXT
p14_default_value=
p14_description=\ \ If `--norc` is specified, `hisat2` will\nnot attempt to align unpaired reads against the reverse-complement (Crick)\nreference strand. In paired-end mode, `--nofw` and `--norc` pertain to the\nfragments; i.e. specifying `--nofw` causes `hisat2` to explore only those\npaired-end configurations corresponding to fragments from the reverse-complement\n(Crick) strand.  Default\: both strands enabled. 
p14_fileFormat=
p14_flag=
p14_name=skip.reverse.strand
p14_numValues=0..1
p14_optional=on
p14_prefix=
p14_prefix_when_specified=
p14_type=java.lang.String
p14_value=\ \= no;--no-rc\=yes
p15_MODE=
p15_TYPE=Integer
p15_default_value=
p15_description=Skip (i.e. do not align) the first `<int>` reads or pairs in the input.
p15_fileFormat=
p15_flag=-s
p15_name=skip.first.n.reads.or.pairs
p15_numValues=0..1
p15_optional=on
p15_prefix=
p15_prefix_when_specified=
p15_type=java.lang.Integer
p15_value=
p16_MODE=
p16_TYPE=Integer
p16_default_value=
p16_description=Align the first `<int>` reads or read pairs from the input (after the\n`-s`/`--skip` reads or pairs have been skipped), then stop.  Default\: no limit.
p16_fileFormat=
p16_flag=-u
p16_name=stop.after.n.reads.or.pairs
p16_numValues=0..1
p16_optional=on
p16_prefix=
p16_prefix_when_specified=
p16_type=java.lang.Integer
p16_value=
p17_MODE=
p17_TYPE=Integer
p17_default_value=
p17_description=Trim `<int>` bases from 5' (left) end of each read before alignment (default\: 0)
p17_fileFormat=
p17_flag=-5
p17_name=trim.5'.end
p17_numValues=0..1
p17_optional=on
p17_prefix=-5
p17_prefix_when_specified=-5
p17_type=java.lang.Integer
p17_value=
p18_MODE=
p18_TYPE=Integer
p18_default_value=
p18_description=Trim `<int>` bases from 3' (right) end of each read before alignment (default\:\n0).
p18_fileFormat=
p18_flag=-3
p18_name=trim.3'.end
p18_numValues=0..1
p18_optional=on
p18_prefix=-3
p18_prefix_when_specified=-3
p18_type=java.lang.Integer
p18_value=
p19_MODE=
p19_TYPE=TEXT
p19_default_value=
p19_description=Sets a function governing the minimum alignment score needed for an alignment to\nbe considered "valid" (i.e. good enough to report).  This is a function of read\nlength. For instance, specifying `L,0,-0.6` sets the minimum-score function `f`\nto `f(x) \= 0 + -0.6 * x`, where `x` is the read length.
p19_fileFormat=
p19_flag=
p19_name=function.governing.minimum.alignment.score
p19_numValues=0..1
p19_optional=on
p19_prefix=
p19_prefix_when_specified=
p19_type=java.lang.String
p19_value=
p1_MODE=IN
p1_TYPE=FILE
p1_default_value=
p1_description=Directory with indices for the alignment
p1_fileFormat=DIRECTORY
p1_flag=
p1_name=index.dir
p1_choiceDir=ftp\://gpftp.broadinstitute.org/module_support_files/hisat2/index/by_genome/
p1_choiceDirFilter=type\=dir
p1_numValues=1..1
p1_optional=
p1_prefix=
p1_prefix_when_specified=
p1_type=java.io.File
p1_value=
p20_MODE=
p20_TYPE=TEXT
p20_default_value=6,2
p20_description=Sets the maximum (`MX`) and minimum (`MN`) mismatch penalties, both integers.  A\nnumber less than or equal to `MX` and greater than or equal to `MN` is\nsubtracted from the alignment score for each position where a read character\naligns to a reference character, the characters do not match, and neither is an\n`N`.  If `--ignore-quals` is specified, the number subtracted quals `MX`.\nOtherwise, the number subtracted is `MN + floor( (MX-MN)(MIN(Q, 40.0)/40.0) )`\nwhere Q is the Phred quality value.  Default\: `MX` \= 6, `MN` \= 2.
p20_fileFormat=
p20_flag=--mp 
p20_name=Maximum.and.minimum.mismatch.penalty
p20_numValues=0..1
p20_optional=on
p20_prefix=--mp 
p20_prefix_when_specified=--mp 
p20_type=java.lang.String
p20_value=
p21_MODE=
p21_TYPE=TEXT
p21_default_value=
p21_description=Disallow soft clipping.
p21_fileFormat=
p21_flag=
p21_name=disallow.soft.clipping
p21_numValues=0..1
p21_optional=on
p21_prefix=
p21_prefix_when_specified=
p21_type=java.lang.String
p21_value=--no-softclip\=yes; \=no
p22_MODE=
p22_TYPE=TEXT
p22_default_value=2,1
p22_description=Sets the maximum (`MX`) and minimum (`MN`) penalties for soft-clipping per base, \nboth integers. A number less than or equal to `MX` and greater than or equal to `MN` is\nsubtracted from the alignment score for each position.\nThe number subtracted is `MN + floor( (MX-MN)(MIN(Q, 40.0)/40.0) )`\nwhere Q is the Phred quality value.  Default\: `MX` \= 2, `MN` \= 1.
p22_fileFormat=
p22_flag=--sp 
p22_name=Maximum.and.minimum.soft.clipping.penalty
p22_numValues=0..1
p22_optional=on
p22_prefix=--sp 
p22_prefix_when_specified=--sp 
p22_type=java.lang.String
p22_value=
p23_MODE=
p23_TYPE=TEXT
p23_default_value=
p23_description=Sets penalty for positions where the read, reference, or both, contain an\nambiguous character such as `N`.  Default\: 1.
p23_fileFormat=
p23_flag=--np 
p23_name=Ambiguous.read.penalty
p23_numValues=0..1
p23_optional=on
p23_prefix=--np 
p23_prefix_when_specified=--np 
p23_type=java.lang.String
p23_value=
p24_MODE=
p24_TYPE=TEXT
p24_default_value=
p24_description=Sets the read gap open (`<int1>`) and extend (`<int2>`) penalties.  A read gap of\nlength N gets a penalty of `<int1>` + N * `<int2>`.  Default\: 5, 3
p24_fileFormat=
p24_flag=--rdg 
p24_name=read.gap.open.and.extend.penalties
p24_numValues=0..1
p24_optional=on
p24_prefix=--rdg 
p24_prefix_when_specified=--rdg 
p24_type=java.lang.String
p24_value=
p25_MODE=
p25_TYPE=TEXT
p25_default_value=
p25_description=Sets the reference gap open (`<int1>`) and extend (`<int2>`) penalties.  A\nreference gap of length N gets a penalty of `<int1>` + N * `<int2>`.  Default\:\n5, 3.
p25_fileFormat=
p25_flag=--rfg 
p25_name=reference.gap.open.and.extend.penalties
p25_numValues=0..1
p25_optional=on
p25_prefix=--rfg 
p25_prefix_when_specified=--rfg 
p25_type=java.lang.String
p25_value=
p26_MODE=
p26_TYPE=Integer
p26_default_value=
p26_description=Sets the penalty for each pair of canonical splice sites (e.g. GT/AG). Default\: 0.
p26_fileFormat=
p26_flag=--pen-cansplice
p26_name=penalty.for.canonical.splice.sites
p26_numValues=0..1
p26_optional=on
p26_prefix=--pen-cansplice
p26_prefix_when_specified=--pen-cansplice
p26_type=java.lang.Integer
p26_value=
p27_MODE=
p27_TYPE=Integer
p27_default_value=
p27_description=Sets the penalty for each pair of non-canonical splice sites (e.g. non-GT/AG). Default\: 12.\n
p27_fileFormat=
p27_flag=--pen-noncansplice
p27_name=penalty.for.non-canonical.splice.sites
p27_numValues=0..1
p27_optional=on
p27_prefix=--pen-noncansplice
p27_prefix_when_specified=--pen-noncansplice
p27_type=java.lang.Integer
p27_value=
p28_MODE=
p28_TYPE=TEXT
p28_default_value=
p28_description=Sets the penalty function for long introns with canonical splice sites so that alignments with shorter introns are preferred\nto those with longer ones.  Default\: G,-8,1
p28_fileFormat=
p28_flag=--pen-noncanintronlen
p28_name=penalty.function.for.long.introns.with.canonical.splice.sites
p28_numValues=0..1
p28_optional=on
p28_prefix=--pen-noncanintronlen
p28_prefix_when_specified=--pen-noncanintronlen
p28_type=java.lang.String
p28_value=
p29_MODE=
p29_TYPE=TEXT
p29_default_value=
p29_description=Sets the penalty for long introns with noncanonical splice sites so that alignments with shorter introns are preferred\nto those with longer ones.  Default\: G,-8,1
p29_fileFormat=
p29_flag=--pen-noncanintronlen
p29_name=penalty.function.for.long.introns.with.non-canonical.splice.sites
p29_numValues=0..1
p29_optional=on
p29_prefix=--pen-noncanintronlen
p29_prefix_when_specified=--pen-noncanintronlen
p29_type=java.lang.String
p29_value=
p2_MODE=IN
p2_TYPE=FILE
p2_default_value=
p2_description=
p2_fileFormat=
p2_flag=-U 
p2_name=unpaired.input.fasta
p2_numValues=0..1
p2_optional=on
p2_prefix=-U 
p2_prefix_when_specified=-U 
p2_type=java.io.File
p2_value=
p30_MODE=
p30_TYPE=Integer
p30_default_value=
p30_description=Sets minimum intron length. Default\: 20
p30_fileFormat=
p30_flag=--min-intronlen
p30_name=Minimum.intron.length
p30_numValues=0..1
p30_optional=on
p30_prefix=--min-intronlen
p30_prefix_when_specified=--min-intronlen
p30_type=java.lang.Integer
p30_value=
p31_MODE=
p31_TYPE=Integer
p31_default_value=
p31_description=Sets maximum intron length. Default\: 500000\n
p31_fileFormat=
p31_flag=--max-intronlen
p31_name=Maximum.intron.length
p31_numValues=0..1
p31_optional=on
p31_prefix=--max-intronlen
p31_prefix_when_specified=--max-intronlen
p31_type=java.lang.Integer
p31_value=
p32_MODE=
p32_TYPE=TEXT
p32_default_value=
p32_description=
p32_fileFormat=
p32_flag=
p32_name=Disable.spliced.alignment
p32_numValues=0..1
p32_optional=on
p32_prefix=
p32_prefix_when_specified=
p32_type=java.lang.String
p32_value=\ \= No; --no-spliced-alignment \=Splice alignment disabled
p33_MODE=
p33_TYPE=Integer
p33_default_value=
p33_description=The minimum fragment length for valid paired-end alignments.This option is valid only with --no-spliced-alignment.\nE.g. if `-I 60` is specified and a paired-end alignment consists of two 20-bp alignments in the\nappropriate orientation with a 20-bp gap between them, that alignment is\nconsidered valid (as long as `-X` is also satisfied).  A 19-bp gap would not\nbe valid in that case.  If trimming options `-3` or `-5` are also used, the\n`-I` constraint is applied with respect to the untrimmed mates.\n\nThe larger the difference between `-I` and `-X`, the slower HISAT2 will\nrun.  This is because larger differences between `-I` and `-X` require that\nHISAT2 scan a larger window to determine if a concordant alignment exists.\nFor typical fragment length ranges (200 to 400 nucleotides), HISAT2 is very\nefficient.\n\nDefault\: 0 (essentially imposing no minimum) 
p33_fileFormat=
p33_flag=-I
p33_name=minimum.fragment.length.for.valid.paired-end.alignments
p33_numValues=0..1
p33_optional=on
p33_prefix=-I
p33_prefix_when_specified=-I
p33_type=java.lang.Integer
p33_value=
p34_MODE=
p34_TYPE=Integer
p34_default_value=
p34_description=The maximum fragment length for valid paired-end alignments.  This option is valid only with --no-spliced-alignment.\nE.g. if `-X 100` is specified and a paired-end alignment consists of two 20-bp alignments in the\nproper orientation with a 60-bp gap between them, that alignment is considered\nvalid (as long as `-I` is also satisfied).  A 61-bp gap would not be valid in\nthat case.  If trimming options `-3` or `-5` are also used, the `-X`\nconstraint is applied with respect to the untrimmed mates, not the trimmed\nmates.\n\nThe larger the difference between `-I` and `-X`, the slower HISAT2 will\nrun.  This is because larger differences between `-I` and `-X` require that\nHISAT2 scan a larger window to determine if a concordant alignment exists.\nFor typical fragment length ranges (200 to 400 nucleotides), HISAT2 is very\nefficient.\n\nDefault\: 500.
p34_fileFormat=
p34_flag=-X
p34_name=maximum.fragment.length.for.valid.paired-end.alignments
p34_numValues=0..1
p34_optional=on
p34_prefix=-X
p34_prefix_when_specified=-X
p34_type=java.lang.Integer
p34_value=
p35_MODE=
p35_TYPE=TEXT
p35_default_value=
p35_description=By default, when `hisat2` cannot find a concordant or discordant alignment for\na pair, it then tries to find alignments for the individual mates.  This option\ndisables that behavior. (--no-mixed)
p35_fileFormat=
p35_flag=
p35_name=disable.finding.alignments.for.individual.mates
p35_numValues=0..1
p35_optional=on
p35_prefix=
p35_prefix_when_specified=
p35_type=java.lang.String
p35_value=\ \= no;--no-mixed\=Disabled
p36_MODE=
p36_TYPE=TEXT
p36_default_value=
p36_description=By default, `hisat2` looks for discordant alignments if it cannot find any\nconcordant alignments.  A discordant alignment is an alignment where both mates\nalign uniquely, but that does not satisfy the paired-end constraints\n(`--fr`/`--rf`/`--ff`, `-I`, `-X`).  This option disables that behavior.(--no-discordant)\n
p36_fileFormat=
p36_flag=
p36_name=disable.looking.for.discordant.alignments
p36_numValues=0..1
p36_optional=on
p36_prefix=
p36_prefix_when_specified=
p36_type=java.lang.String
p36_value=\ \= No;--no-discordant\=Disabled
p37_MODE=IN
p37_TYPE=FILE
p37_default_value=
p37_description=With this mode, you can provide a list of known splice sites, which HISAT2 makes use of to align reads with small anchors.   \nYou can create such a list using `python hisat2_extract_splice_sites.py genes.gtf > splicesites.txt`,\nwhere `hisat2_extract_splice_sites.py` is included in the HISAT2 package, `genes.gtf` is a gene annotation file,\nand `splicesites.txt` is a list of splice sites with which you provide HISAT2 in this mode.\nNote that it is better to use indexes built using annotated transcripts (such as <i>genome_tran</i> or <i>genome_snp_tran</i>), which works better\nthan using this option.  It has no effect to provide splice sites that are already included in the indexes.
p37_fileFormat=
p37_flag=\ --known-splicesite-infile 
p37_name=known.splicesite.infile
p37_numValues=0..1
p37_optional=on
p37_prefix=\ --known-splicesite-infile 
p37_prefix_when_specified=\ --known-splicesite-infile 
p37_type=java.io.File
p37_value=
p3_MODE=
p3_TYPE=TEXT
p3_default_value=out.sam
p3_description=
p3_fileFormat=
p3_flag=
p3_name=output.file.name
p3_numValues=1..1
p3_optional=
p3_prefix=
p3_prefix_when_specified=
p3_type=java.lang.String
p3_value=
p4_MODE=
p4_TYPE=TEXT
p4_default_value=genome
p4_description=For the pre-genrated indices, this will be one of genome, genome_tran, genome_snp or genome_snp_tran according to the selected index. For indices you have generated yourself, this will be the portion of the filename in front of the \".#.ht2\" for the index files.
p4_fileFormat=
p4_flag=
p4_name=index.file.prefix
p4_numValues=1..1
p4_optional=
p4_prefix=
p4_prefix_when_specified=
p4_type=java.lang.String
p4_value=
p5_MODE=IN
p5_TYPE=FILE
p5_default_value=
p5_description=
p5_fileFormat=
p5_flag=-1 
p5_name=reads.pair.1
p5_numValues=0..1
p5_optional=on
p5_prefix=-1 
p5_prefix_when_specified=-1 
p5_type=java.io.File
p5_value=
p6_MODE=IN
p6_TYPE=FILE
p6_default_value=
p6_description=
p6_fileFormat=
p6_flag=-2 
p6_name=reads.pair.2
p6_numValues=0..1
p6_optional=on
p6_prefix=-2 
p6_prefix_when_specified=-2 
p6_type=java.io.File
p6_value=
p7_MODE=
p7_TYPE=Integer
p7_default_value=
p7_description=HISAT2 searches for up to N distinct, primary alignments for\neach read, where N equals the integer specified with this parameter.\nPrimary alignments mean alignments whose alignment score is equal or higher than any other alignments.\nIt is possible that multiple distinct alignments have the same score.\nThat is, if `2` is specified, HISAT2 will search for at most 2 distinct\nalignments. The alignment score for a paired-end alignment equals the sum of the\nalignment scores of the individual mates.  Each reported read or pair alignment\nbeyond the first has the SAM 'secondary' bit (which equals 256) set in its FLAGS\nfield.
p7_fileFormat=
p7_flag=-k 
p7_name=max.n.primary.alignments
p7_numValues=0..1
p7_optional=on
p7_prefix=-k 
p7_prefix_when_specified=-k 
p7_type=java.lang.Integer
p7_value=
p8_MODE=
p8_TYPE=TEXT
p8_default_value=\ 
p8_description=Write paired-end reads that align concordantly at least once to a seperate fastq file
p8_fileFormat=
p8_flag=
p8_name=write.unaligned.reads.to.separate.files
p8_numValues=0..1
p8_optional=
p8_prefix=
p8_prefix_when_specified=
p8_type=java.lang.String
p8_value=--un-conc-gz (--un-gz)\=yes; \=no
p9_MODE=
p9_TYPE=TEXT
p9_default_value=\ 
p9_description=Write paired-end reads that align concordantly at least once to separate fastq  file(s)
p9_fileFormat=
p9_flag=
p9_name=write.aligned.reads.to.separate.files
p9_numValues=0..1
p9_optional=
p9_prefix=
p9_prefix_when_specified=
p9_type=java.lang.String
p9_value=--al-gz --al-conc-gz\=yes; \=no
privacy=private
quality=development
taskDoc=
taskType=Sequence Analysis
userid=ted
version=Initial revision
